Display file
 - Vai ser um vetor de objetos que devem ser desenhados em loop

Posso usar o drawPoint e o drawLine do QtPainter

Classes
- Drawable (classe primária)
- Point
- Line
- Polygon
- Polyline (talvez)

O que são coordenadas de mundo, de objeto e de tela?
- Coordenada de objeto: os objetos tem coordenadas próprias,
assim seus pontos são baseados nessas coordenadas.
- Coordenada de mundo: nessas coordenadas ficarão as referências dos vários 
objetos coexistindo.
- Coordenada de tela: essas coordenadas são 2D e a origem fica no canto superior direito.
Todo objeto precisará passar por uma transformação para ser representado na tela.
-------

Como funciona a atualização de desenhos no qtcreator?
update() chama o paintEvent, atualizando os desenhos. 
O update é chamado automaticamente ao redimensionar a tela
É possível programar uma quantidade de tempo para chamar o update
-------

Como gerenciar os calculos das matrizes?
X Biblioteca de matrizes 
X Transformação de coordenadas em matrizes
X Translação envolve apenas mover o ponto de referência
X Rotação e Escala envolvem atualizar todos os pontos do objeto em relação a referência 
(por padrão a referência vai ficar no início da extensão do objeto, mas pode ficar no centro) 
-------

O que é uma window?
Uma window é como uma câmera, ela percorre o mundo capturando seu ponto de vista. Normalmente, a
window não captura todos os objetos do mundo de uma vez, então, por questões de eficiência, só realmente
desenhamos o que é capturado. Cada window precisa conter uma lista dos objetos capturados. As coordenadas 
dessa lista são dessa window específica. Ao final de cada atualização, precisamos transformar os pontos
capturados pela window em pontos para viewport.

O que é viewport?
Na analogia da câmera, uma viewport é uma tela que recebe as informações da window. Essa tela, não se mexe
e tem tamanho fixo. Esse tamanho geralmente não é o tamanho capturado pela câmera, portanto, realiza-se a
transformação mencionada anteriormente. Cada viewport precisa estar relacionada com apenas uma window.

Modelagem
- O app tem um Qframe que é uma viewport
- Essa viewport pode se conectar a uma window 
- Essa window recebe a referência de um displayFile
- Durante a transformada de viewport
  1. Os polígonos dos displayFile se transformam em linhas (Line)
  2. As cordenadas das linhas são normalizadas
  3. Executamos o clipping
  4. Criamos a matriz de transformação (transformada de viewport) 
  5. Aplicamos a matrix em todas as linhas

Insights:
- Objects são um conjunto de polygons que tem a mesma referência
- Polygon são um conjunto de pontos com uma referência
- Drawable é interface que pode devolver Lines 
- DisplayFile é uma referência para uma lista de Drawables

Próximos passos:
- Cobrir tudo com testes
  - Consertar os testes existentes 
  - Criar testes para Polygon
  - Criar testes para Line 
  - Criar testes para Point 
  - Criar testes para Matrix
  - Criar testes para Window
  - Criar testes para Object 
  - Criar testes para Parser 
  - Criar testes para Funções diversas
X Refatorar
  X Transformar polygons
  X Transformar drawables
  X Transformar lines
  X Refatorar window
  X Refatorar viewport 
  X Usar pragma once 
  X Remover draw method
- Arrumar eixo y do viewport
X Adicionar o 3D
  X Criar um objeto 3D
  X Adicionar rotação nos três eixos
- Adicionar o Object
- Adicionar o Parser
- Atualizar display do app

Entrega 5:
a) Incluir a leitura de arquivo do tipo OBJ.
b) Escolha pelo menos dois pokemons diferentes para visualizar em seu projeto. Exemplos de modelos podem ser 
encontrados acessando: https://free3d.com/3dmodel/charizard-85299.html.
c) Os pokemons devem ser inseridos na cena que você já criou nas outras entregas e visualizados ao mesmo tempo.
d) Ajustar as transformações geométricas para 3D;
e) Incluir a projeção ortogonal ao projeto de visualização;

Entrega 6:
a) Incluir a projeção perspectiva ao projeto;

Entrega 7:
a) Fazer os arremates finais para a entrega do projeto;
b) Incluir na interface algum mecanismo para as transformações no objeto e navegação de câmera

ChatGPT: Pipeline resumido
- Transformação do modelo para o espaço de mundo: Aplica as transformações locais de um objeto.
- Transformação para o espaço de câmera (ou view): Ajusta as coordenadas para o referencial da câmera.
- Transformação de projeção: Aplica a projeção (perspectiva ou ortogonal), mapeando o espaço de câmera para o espaço de projeção.
- Clipping: Descarta ou ajusta as primitivas (linhas, triângulos, etc.) que estão fora da área visível (geralmente o volume de visão ou view frustum).
- Transformação de window para viewport: Mapeia as coordenadas normalizadas da janela (window) para a área de exibição (viewport), geralmente em pixels na tela.
